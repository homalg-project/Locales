# SPDX-License-Identifier: GPL-2.0-or-later
# Locales: Locales, frames, coframes, meet semi-lattices of locally closed subsets, and Boolean algebras of constructible sets
#
# Implementations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecordTools.gi

## MorphismFromDoubleNegation
InstallMethod( AddMorphismFromDoubleNegation,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "MorphismFromDoubleNegation", category, func, -1 );
    
end );

InstallMethod( AddMorphismFromDoubleNegation,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "MorphismFromDoubleNegation", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## MorphismFromDoubleNegationWithGivenDoubleNegation
InstallMethod( AddMorphismFromDoubleNegationWithGivenDoubleNegation,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "MorphismFromDoubleNegationWithGivenDoubleNegation", category, func, -1 );
    
end );

InstallMethod( AddMorphismFromDoubleNegationWithGivenDoubleNegation,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "MorphismFromDoubleNegationWithGivenDoubleNegation", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( MorphismFromDoubleNegationWithGivenDoubleNegation,
                    "MorphismFromDoubleNegationWithGivenDoubleNegation by calling MorphismFromDoubleNegation with the WithGiven argument(s) dropped",
                    [
                        [ MorphismFromDoubleNegation, 1 ],
                    ],
  function( cat, a, s )
    
    return MorphismFromDoubleNegation( cat, a );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( MorphismFromDoubleNegation,
                    "MorphismFromDoubleNegation by calling MorphismFromDoubleNegationWithGivenDoubleNegation with the WithGiven object(s)",
                    [
                        [ MorphismFromDoubleNegationWithGivenDoubleNegation, 1 ],
                        [ NegationOnObjects, 2 ],
                    ],
  function( cat, a )
    
    return MorphismFromDoubleNegationWithGivenDoubleNegation( cat, a, NegationOnObjects( cat, NegationOnObjects( cat, a ) ) );
    
end : is_with_given_derivation := true );

## MorphismToDoubleConegation
InstallMethod( AddMorphismToDoubleConegation,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "MorphismToDoubleConegation", category, func, -1 );
    
end );

InstallMethod( AddMorphismToDoubleConegation,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "MorphismToDoubleConegation", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## MorphismToDoubleConegationWithGivenDoubleConegation
InstallMethod( AddMorphismToDoubleConegationWithGivenDoubleConegation,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "MorphismToDoubleConegationWithGivenDoubleConegation", category, func, -1 );
    
end );

InstallMethod( AddMorphismToDoubleConegationWithGivenDoubleConegation,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "MorphismToDoubleConegationWithGivenDoubleConegation", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( MorphismToDoubleConegationWithGivenDoubleConegation,
                    "MorphismToDoubleConegationWithGivenDoubleConegation by calling MorphismToDoubleConegation with the WithGiven argument(s) dropped",
                    [
                        [ MorphismToDoubleConegation, 1 ],
                    ],
  function( cat, a, r )
    
    return MorphismToDoubleConegation( cat, a );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( MorphismToDoubleConegation,
                    "MorphismToDoubleConegation by calling MorphismToDoubleConegationWithGivenDoubleConegation with the WithGiven object(s)",
                    [
                        [ MorphismToDoubleConegationWithGivenDoubleConegation, 1 ],
                        [ ConegationOnObjects, 2 ],
                    ],
  function( cat, a )
    
    return MorphismToDoubleConegationWithGivenDoubleConegation( cat, a, ConegationOnObjects( cat, ConegationOnObjects( cat, a ) ) );
    
end : is_with_given_derivation := true );
